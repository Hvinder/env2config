const fs = require("fs");
const path = require("path");

const readEnvFile = (envFilePath) => {
  try {
    const data = fs.readFileSync(envFilePath, "utf8");
    const envArr = data
      .split("\n")
      .map((e) => e.trim())
      .filter(Boolean)
      .filter((e) => e.includes("=") && !e.startsWith("#"));

    return envArr.reduce((obj, item) => {
      const [key, value] = item.split("=");
      obj[key] = value;
      return obj;
    }, {});
  } catch (err) {
    console.error(err);
    throw err;
  }
};

const removeEnvWithPrefixesAndDuplicates = (envObj, excludePrefixes) => {
  return Object.keys(envObj)
    .filter((key) => !excludePrefixes.some((prefix) => key.startsWith(prefix)))
    .filter((key, index, arr) => arr.indexOf(key) === index)
    .reduce((obj, key) => {
      obj[key] = envObj[key];
      return obj;
    }, {});
};

const writeConfigFile = ({ envObj, targetPath }) => {
  try {
    const baseDir = path.dirname(targetPath);
    const filePath = path.basename(targetPath);

    if (!fs.existsSync(baseDir)) {
      fs.mkdirSync(baseDir, { recursive: true });
    }
    const configContent = Object.keys(envObj)
      .map((key) => `${key}: process.env.${key}`)
      .join(",\n\u0020\u0020");
    const fileContent = `// this file was autogenerated by env2config (https://github.com/hvinder/env2config)\n\nconst envConfig = {\n\u0020\u0020${configContent}\n};\n\nmodule.exports = envConfig;\n`;
    fs.writeFileSync(path.join(baseDir, filePath), fileContent);
  } catch (error) {
    console.error(error);
    throw error;
  }
};

const initEnvParse = ({
  envPath = ".env",
  targetPath = "src/config/env.config.js",
  excludePrefixes = [],
} = {}) => {
  try {
    const envObj = readEnvFile(envPath);
    const filteredEnvObj = removeEnvWithPrefixesAndDuplicates(
      envObj,
      excludePrefixes
    );
    writeConfigFile({ envObj: filteredEnvObj, targetPath });
  } catch (err) {
    console.error(err);
  }
};

module.exports = initEnvParse;
